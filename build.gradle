plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'signing'
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.github.joutvhu'
version = '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def snapshotVersion = version.endsWith('-SNAPSHOT') || version.endsWith('.SNAPSHOT')

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    versions = [
         'spring-boot.version'           : '3.0.0'
    ]
    managedVersions = [
    ]
    otherVersions = [
         'org.springframework.boot:spring-boot-dependencies': 'spring-boot.version'
    ]
    optionalDependencies = [
    ]
}

dependencyManagement {
    dependencies {
        ext.managedVersions.each {
            dependency "${it.key}:${ext.versions[it.value]}"
        }
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    testImplementation(platform('org.junit:junit-bom:5.10.0'))
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'
}

jar {
    enabled = true
    manifest {
        attributes 'Built-By': 'joutvhu (Giao Ho)'
        attributes 'Build-Date': java.time.Instant.now().toString()
        attributes 'Bundle-Name': 'Java Library Template'
        attributes 'Bundle-Vendor': project.group
        attributes 'Bundle-SymbolicName': project.name
        attributes 'Bundle-Version': project.version
    }
    into("META-INF/maven/${project.group}/${project.name}") {
        from {
            generatePomFileForMavenPublication
        }
        rename {
            it.replace('pom-default.xml', 'pom.xml')
        }
    }
}

bootJar {
    enabled = false
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    with jar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives fatJar, sourcesJar, javadocJar
}

test {
    useJUnitPlatform()
    filter {
        includeTestsMatching 'com.joutvhu.*'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = project.name
            artifacts = [fatJar, sourcesJar, javadocJar]
            version = version

            pom {
                name = project.name
                description = 'Template for java library using gradle'
                url = 'https://github.com/joutvhu/java-library-template'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/joutvhu/java-library-template/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'joutvhu'
                        name = 'Giao Ho'
                        email = 'joutvhu@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:joutvhu/java-library-template.git'
                    developerConnection = 'scm:git:git@github.com:joutvhu/java-library-template.git'
                    url = 'https://github.com/joutvhu/java-library-template'
                }
                issueManagement {
                    system = 'Github Issue'
                    url = 'https://github.com/joutvhu/java-library-template/issues'
                }
                organization {
                    name = 'Giao Ho'
                    url = 'https://github.com/joutvhu'
                }
                properties = project.ext.versions instanceof Map ? project.ext.versions : new HashMap<>()
                withXml {
                    def pomNode = asNode();
                    def dependencyManagement = pomNode.get('dependencyManagement')
                    if (dependencyManagement.dependencies.dependency.isEmpty()) {
                        pomNode.remove(dependencyManagement)
                    } else {
                        dependencyManagement.dependencies.dependency.each {
                            def key = "${it.groupId.text()}:${it.artifactId.text()}"
                            def versionProperty = project.ext.managedVersions[key]
                            if (versionProperty == null) {
                                versionProperty = project.ext.otherVersions[key]
                            }
                            if (versionProperty) {
                                it.version[0].setValue("\${$versionProperty}")
                            }
                        }
                    }

                    def dependenciesNode = pomNode.appendNode('dependencies')
                    if (configurations.implementation.allDependencies.isEmpty()) {
                        pomNode.remove(dependenciesNode)
                    } else {
                        configurations.implementation.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            if (it.version != null) {
                                dependencyNode.appendNode('version', it.version)
                            }
                            def key = "${it.group}:${it.name}"
                            if (project.ext.optionalDependencies.any { el -> el.contains(key) }) {
                                dependencyNode.appendNode('optional', true)
                            }
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'sonatype'
            if (snapshotVersion) {
                url = 'https://oss.sonatype.org/content/repositories/snapshots'
            } else {
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            }
            credentials {
                username = project.ossrhUsername
                password = project.ossrhPassword
            }
        }
        maven {
            name = 'github'
            url = "https://maven.pkg.github.com/joutvhu/java-library-template"
            credentials {
                username = project.githubUsername
                password = project.githubPassword
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}

tasks.publishMavenPublicationToGithubRepository.configure {
    onlyIf { !snapshotVersion }
}
